
ADC_POT_Free_Running.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002798  0000282c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  0000284a  2**0
                  ALLOC
  3 .stab         00001fec  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001306  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000096d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a28b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 95 11 	jmp	0x232a	; 0x232a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <main>
      8a:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void ADC_init(ADC_Configuration_Struct * Cfg_Ptr_Struct)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=0;
     b54:	e7 e2       	ldi	r30, 0x27	; 39
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1
	ADMUX|=Cfg_Ptr_Struct->Voltage_Reference_Mode|Cfg_Ptr_Struct->ADC_Channel_Choice|Cfg_Ptr_Struct->ADLAR_Operation_Choice;
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	20 81       	ld	r18, Z
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	90 81       	ld	r25, Z
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	98 2b       	or	r25, r24
     b72:	e9 81       	ldd	r30, Y+1	; 0x01
     b74:	fa 81       	ldd	r31, Y+2	; 0x02
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	89 2b       	or	r24, r25
     b7a:	82 2b       	or	r24, r18
     b7c:	8c 93       	st	X, r24
	ADCSRA|=Cfg_Ptr_Struct->ADC_Auto_Triggering_State|Cfg_Ptr_Struct->ADC_Interrtupt_Enable_State|
     b7e:	a6 e2       	ldi	r26, 0x26	; 38
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e6 e2       	ldi	r30, 0x26	; 38
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	20 81       	ld	r18, Z
     b88:	e9 81       	ldd	r30, Y+1	; 0x01
     b8a:	fa 81       	ldd	r31, Y+2	; 0x02
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	84 81       	ldd	r24, Z+4	; 0x04
     b94:	98 2b       	or	r25, r24
     b96:	e9 81       	ldd	r30, Y+1	; 0x01
     b98:	fa 81       	ldd	r31, Y+2	; 0x02
     b9a:	85 81       	ldd	r24, Z+5	; 0x05
     b9c:	98 2b       	or	r25, r24
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	86 81       	ldd	r24, Z+6	; 0x06
     ba4:	89 2b       	or	r24, r25
     ba6:	82 2b       	or	r24, r18
     ba8:	8c 93       	st	X, r24
			Cfg_Ptr_Struct->ADC_Prescaler|Cfg_Ptr_Struct->ADC_Triggering_Source;
	Set_Bit(ADCSRA,ADEN);
     baa:	a6 e2       	ldi	r26, 0x26	; 38
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e6 e2       	ldi	r30, 0x26	; 38
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	8c 93       	st	X, r24
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <ADC_Read_Channel>:
 * OUTPUTS 		 : uint16 *ADC_Read_Value to hold ADC value and save it and it's address of global variable
 *
 * Return		 : void
 **************************************************************************/
void ADC_Read_Channel(uint16 *ADC_Read_Value,ADC_Configuration_Struct * Cfg_Ptr_Struct)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <ADC_Read_Channel+0x6>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_Read_Channel+0x8>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	9a 83       	std	Y+2, r25	; 0x02
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	7c 83       	std	Y+4, r23	; 0x04
     bd4:	6b 83       	std	Y+3, r22	; 0x03
	Cfg_Ptr_Struct->ADC_Channel_Choice&=0x07;
     bd6:	eb 81       	ldd	r30, Y+3	; 0x03
     bd8:	fc 81       	ldd	r31, Y+4	; 0x04
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	87 70       	andi	r24, 0x07	; 7
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	82 83       	std	Z+2, r24	; 0x02
	ADMUX&=0xE0;
     be4:	a7 e2       	ldi	r26, 0x27	; 39
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e7 e2       	ldi	r30, 0x27	; 39
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 7e       	andi	r24, 0xE0	; 224
     bf0:	8c 93       	st	X, r24
	ADMUX|=Cfg_Ptr_Struct->ADC_Channel_Choice;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	90 81       	ld	r25, Z
     bfc:	eb 81       	ldd	r30, Y+3	; 0x03
     bfe:	fc 81       	ldd	r31, Y+4	; 0x04
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	89 2b       	or	r24, r25
     c04:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADSC);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	8c 93       	st	X, r24
	if(Cfg_Ptr_Struct->ADC_Interrtupt_Enable_State==ADC_Interrupt_Disabled)
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	88 23       	and	r24, r24
     c1c:	c1 f4       	brne	.+48     	; 0xc4e <ADC_Read_Channel+0x8c>
	{

		while(!(Get_Bit(ADCSRA,ADIF)));
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	80 71       	andi	r24, 0x10	; 16
     c2a:	90 70       	andi	r25, 0x00	; 0
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	b9 f3       	breq	.-18     	; 0xc1e <ADC_Read_Channel+0x5c>
		Set_Bit(ADCSRA,ADIF);
     c30:	a6 e2       	ldi	r26, 0x26	; 38
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e6 e2       	ldi	r30, 0x26	; 38
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 61       	ori	r24, 0x10	; 16
     c3c:	8c 93       	st	X, r24
		*ADC_Read_Value=ADC;
     c3e:	e4 e2       	ldi	r30, 0x24	; 36
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <DIO_WritePin>:
 */

#include "DIO_operations.h"
#include "Memory_map.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <DIO_WritePin+0x6>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <DIO_WritePin+0x16>
     c70:	70 c0       	rjmp	.+224    	; 0xd52 <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	88 30       	cpi	r24, 0x08	; 8
     c76:	a0 f4       	brcc	.+40     	; 0xca0 <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
     c78:	ab e3       	ldi	r26, 0x3B	; 59
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	eb e3       	ldi	r30, 0x3B	; 59
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 2e       	mov	r0, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_WritePin+0x3a>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_WritePin+0x36>
     c9a:	84 2b       	or	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	ce c0       	rjmp	.+412    	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	d0 f0       	brcs	.+52     	; 0xcda <DIO_WritePin+0x7e>
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	80 31       	cpi	r24, 0x10	; 16
     caa:	b8 f4       	brcc	.+46     	; 0xcda <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
     cac:	a8 e3       	ldi	r26, 0x38	; 56
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e8 e3       	ldi	r30, 0x38	; 56
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 01       	movw	r18, r24
     cc0:	28 50       	subi	r18, 0x08	; 8
     cc2:	30 40       	sbci	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_WritePin+0x74>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_WritePin+0x70>
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	b1 c0       	rjmp	.+354    	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	80 31       	cpi	r24, 0x10	; 16
     cde:	d0 f0       	brcs	.+52     	; 0xd14 <DIO_WritePin+0xb8>
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 31       	cpi	r24, 0x18	; 24
     ce4:	b8 f4       	brcc	.+46     	; 0xd14 <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
     ce6:	a5 e3       	ldi	r26, 0x35	; 53
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e5 e3       	ldi	r30, 0x35	; 53
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9c 01       	movw	r18, r24
     cfa:	20 51       	subi	r18, 0x10	; 16
     cfc:	30 40       	sbci	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_WritePin+0xae>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_WritePin+0xaa>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	94 c0       	rjmp	.+296    	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 31       	cpi	r24, 0x18	; 24
     d18:	08 f4       	brcc	.+2      	; 0xd1c <DIO_WritePin+0xc0>
     d1a:	90 c0       	rjmp	.+288    	; 0xe3c <DIO_WritePin+0x1e0>
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 32       	cpi	r24, 0x20	; 32
     d20:	08 f0       	brcs	.+2      	; 0xd24 <DIO_WritePin+0xc8>
     d22:	8c c0       	rjmp	.+280    	; 0xe3c <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
     d24:	a2 e3       	ldi	r26, 0x32	; 50
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e2 e3       	ldi	r30, 0x32	; 50
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 01       	movw	r18, r24
     d38:	28 51       	subi	r18, 0x18	; 24
     d3a:	30 40       	sbci	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_WritePin+0xec>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_WritePin+0xe8>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	75 c0       	rjmp	.+234    	; 0xe3c <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <DIO_WritePin+0xfe>
     d58:	71 c0       	rjmp	.+226    	; 0xe3c <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	88 30       	cpi	r24, 0x08	; 8
     d5e:	a8 f4       	brcc	.+42     	; 0xd8a <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
     d60:	ab e3       	ldi	r26, 0x3B	; 59
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	eb e3       	ldi	r30, 0x3B	; 59
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_WritePin+0x122>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_WritePin+0x11e>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	59 c0       	rjmp	.+178    	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	d8 f0       	brcs	.+54     	; 0xdc6 <DIO_WritePin+0x16a>
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	80 31       	cpi	r24, 0x10	; 16
     d94:	c0 f4       	brcc	.+48     	; 0xdc6 <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
     d96:	a8 e3       	ldi	r26, 0x38	; 56
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 e3       	ldi	r30, 0x38	; 56
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 01       	movw	r18, r24
     daa:	28 50       	subi	r18, 0x08	; 8
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_WritePin+0x15e>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_WritePin+0x15a>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	80 31       	cpi	r24, 0x10	; 16
     dca:	d8 f0       	brcs	.+54     	; 0xe02 <DIO_WritePin+0x1a6>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 31       	cpi	r24, 0x18	; 24
     dd0:	c0 f4       	brcc	.+48     	; 0xe02 <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
     dd2:	a5 e3       	ldi	r26, 0x35	; 53
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 01       	movw	r18, r24
     de6:	20 51       	subi	r18, 0x10	; 16
     de8:	30 40       	sbci	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_WritePin+0x19a>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_WritePin+0x196>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	1d c0       	rjmp	.+58     	; 0xe3c <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 31       	cpi	r24, 0x18	; 24
     e06:	d0 f0       	brcs	.+52     	; 0xe3c <DIO_WritePin+0x1e0>
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 32       	cpi	r24, 0x20	; 32
     e0c:	b8 f4       	brcc	.+46     	; 0xe3c <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9c 01       	movw	r18, r24
     e22:	28 51       	subi	r18, 0x18	; 24
     e24:	30 40       	sbci	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_WritePin+0x1d6>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_WritePin+0x1d2>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
	}
}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <DIO_ReadPin+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	88 30       	cpi	r24, 0x08	; 8
     e56:	90 f4       	brcc	.+36     	; 0xe7c <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
     e58:	e9 e3       	ldi	r30, 0x39	; 57
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_ReadPin+0x2c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_ReadPin+0x28>
     e76:	84 23       	and	r24, r20
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	50 c0       	rjmp	.+160    	; 0xf1c <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	c0 f0       	brcs	.+48     	; 0xeb2 <DIO_ReadPin+0x6c>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 31       	cpi	r24, 0x10	; 16
     e86:	a8 f4       	brcc	.+42     	; 0xeb2 <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
     e88:	e6 e3       	ldi	r30, 0x36	; 54
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	9c 01       	movw	r18, r24
     e98:	28 50       	subi	r18, 0x08	; 8
     e9a:	30 40       	sbci	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_ReadPin+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_ReadPin+0x5e>
     eac:	84 23       	and	r24, r20
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	35 c0       	rjmp	.+106    	; 0xf1c <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	80 31       	cpi	r24, 0x10	; 16
     eb6:	c0 f0       	brcs	.+48     	; 0xee8 <DIO_ReadPin+0xa2>
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	88 31       	cpi	r24, 0x18	; 24
     ebc:	a8 f4       	brcc	.+42     	; 0xee8 <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
     ebe:	e3 e3       	ldi	r30, 0x33	; 51
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c 01       	movw	r18, r24
     ece:	20 51       	subi	r18, 0x10	; 16
     ed0:	30 40       	sbci	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_ReadPin+0x98>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_ReadPin+0x94>
     ee2:	84 23       	and	r24, r20
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	1a c0       	rjmp	.+52     	; 0xf1c <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	88 31       	cpi	r24, 0x18	; 24
     eec:	b8 f0       	brcs	.+46     	; 0xf1c <DIO_ReadPin+0xd6>
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	80 32       	cpi	r24, 0x20	; 32
     ef2:	a0 f4       	brcc	.+40     	; 0xf1c <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
     ef4:	e0 e3       	ldi	r30, 0x30	; 48
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 01       	movw	r18, r24
     f04:	28 51       	subi	r18, 0x18	; 24
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_ReadPin+0xce>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_ReadPin+0xca>
     f18:	84 23       	and	r24, r20
     f1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_SetPinDirection+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <DIO_SetPinDirection+0x16>
     f3c:	70 c0       	rjmp	.+224    	; 0x101e <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	a0 f4       	brcc	.+40     	; 0xf6c <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     f44:	aa e3       	ldi	r26, 0x3A	; 58
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ea e3       	ldi	r30, 0x3A	; 58
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_SetPinDirection+0x3a>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_SetPinDirection+0x36>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	ce c0       	rjmp	.+412    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	d0 f0       	brcs	.+52     	; 0xfa6 <DIO_SetPinDirection+0x7e>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	80 31       	cpi	r24, 0x10	; 16
     f76:	b8 f4       	brcc	.+46     	; 0xfa6 <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     f78:	a7 e3       	ldi	r26, 0x37	; 55
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e7 e3       	ldi	r30, 0x37	; 55
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 01       	movw	r18, r24
     f8c:	28 50       	subi	r18, 0x08	; 8
     f8e:	30 40       	sbci	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_SetPinDirection+0x74>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_SetPinDirection+0x70>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	b1 c0       	rjmp	.+354    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	80 31       	cpi	r24, 0x10	; 16
     faa:	d0 f0       	brcs	.+52     	; 0xfe0 <DIO_SetPinDirection+0xb8>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 31       	cpi	r24, 0x18	; 24
     fb0:	b8 f4       	brcc	.+46     	; 0xfe0 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 01       	movw	r18, r24
     fc6:	20 51       	subi	r18, 0x10	; 16
     fc8:	30 40       	sbci	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinDirection+0xae>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinDirection+0xaa>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	94 c0       	rjmp	.+296    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 31       	cpi	r24, 0x18	; 24
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <DIO_SetPinDirection+0xc0>
     fe6:	90 c0       	rjmp	.+288    	; 0x1108 <DIO_SetPinDirection+0x1e0>
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	80 32       	cpi	r24, 0x20	; 32
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_SetPinDirection+0xc8>
     fee:	8c c0       	rjmp	.+280    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
     ff0:	a4 e3       	ldi	r26, 0x34	; 52
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e4 e3       	ldi	r30, 0x34	; 52
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9c 01       	movw	r18, r24
    1004:	28 51       	subi	r18, 0x18	; 24
    1006:	30 40       	sbci	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_SetPinDirection+0xec>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_SetPinDirection+0xe8>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	75 c0       	rjmp	.+234    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <DIO_SetPinDirection+0xfe>
    1024:	71 c0       	rjmp	.+226    	; 0x1108 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	a8 f4       	brcc	.+42     	; 0x1056 <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
    102c:	ab e3       	ldi	r26, 0x3B	; 59
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	eb e3       	ldi	r30, 0x3B	; 59
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_SetPinDirection+0x122>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_SetPinDirection+0x11e>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	59 c0       	rjmp	.+178    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	d8 f0       	brcs	.+54     	; 0x1092 <DIO_SetPinDirection+0x16a>
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	c0 f4       	brcc	.+48     	; 0x1092 <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 01       	movw	r18, r24
    1076:	28 50       	subi	r18, 0x08	; 8
    1078:	30 40       	sbci	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_SetPinDirection+0x15e>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_SetPinDirection+0x15a>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	3b c0       	rjmp	.+118    	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	80 31       	cpi	r24, 0x10	; 16
    1096:	d8 f0       	brcs	.+54     	; 0x10ce <DIO_SetPinDirection+0x1a6>
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	88 31       	cpi	r24, 0x18	; 24
    109c:	c0 f4       	brcc	.+48     	; 0x10ce <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
    109e:	a4 e3       	ldi	r26, 0x34	; 52
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e4 e3       	ldi	r30, 0x34	; 52
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 01       	movw	r18, r24
    10b2:	20 51       	subi	r18, 0x10	; 16
    10b4:	30 40       	sbci	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_SetPinDirection+0x19a>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_SetPinDirection+0x196>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	1d c0       	rjmp	.+58     	; 0x1108 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 31       	cpi	r24, 0x18	; 24
    10d2:	d0 f0       	brcs	.+52     	; 0x1108 <DIO_SetPinDirection+0x1e0>
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	80 32       	cpi	r24, 0x20	; 32
    10d8:	b8 f4       	brcc	.+46     	; 0x1108 <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
    10da:	a1 e3       	ldi	r26, 0x31	; 49
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e1 e3       	ldi	r30, 0x31	; 49
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 01       	movw	r18, r24
    10ee:	28 51       	subi	r18, 0x18	; 24
    10f0:	30 40       	sbci	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_SetPinDirection+0x1d6>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_SetPinDirection+0x1d2>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
		}
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <LCD_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_init(void)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    111a:	aa e3       	ldi	r26, 0x3A	; 58
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8e 60       	ori	r24, 0x0E	; 14
    1126:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1128:	aa e3       	ldi	r26, 0x3A	; 58
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ea e3       	ldi	r30, 0x3A	; 58
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	80 6f       	ori	r24, 0xF0	; 240
    1134:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    113c:	88 e2       	ldi	r24, 0x28	; 40
    113e:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1142:	8c e0       	ldi	r24, 0x0C	; 12
    1144:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <LCD_sendCommand>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_sendCommand(uint8 command)
{
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	c3 56       	subi	r28, 0x63	; 99
    1162:	d0 40       	sbci	r29, 0x00	; 0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	fe 01       	movw	r30, r28
    1170:	ed 59       	subi	r30, 0x9D	; 157
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 83       	st	Z, r24
	Clear_Bit(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1176:	ab e3       	ldi	r26, 0x3B	; 59
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	8c 93       	st	X, r24
	Clear_Bit(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1184:	ab e3       	ldi	r26, 0x3B	; 59
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	eb e3       	ldi	r30, 0x3B	; 59
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	8c 93       	st	X, r24
    1192:	fe 01       	movw	r30, r28
    1194:	e1 5a       	subi	r30, 0xA1	; 161
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e8       	ldi	r26, 0x80	; 128
    119e:	bf e3       	ldi	r27, 0x3F	; 63
    11a0:	80 83       	st	Z, r24
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	a2 83       	std	Z+2, r26	; 0x02
    11a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	8e 01       	movw	r16, r28
    11aa:	05 5a       	subi	r16, 0xA5	; 165
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	e1 5a       	subi	r30, 0xA1	; 161
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	f8 01       	movw	r30, r16
    11ce:	80 83       	st	Z, r24
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	a2 83       	std	Z+2, r26	; 0x02
    11d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d6:	fe 01       	movw	r30, r28
    11d8:	e5 5a       	subi	r30, 0xA5	; 165
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	44 f4       	brge	.+16     	; 0x1204 <LCD_sendCommand+0xb0>
		__ticks = 1;
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 5a       	subi	r30, 0xA7	; 167
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	64 c0       	rjmp	.+200    	; 0x12cc <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1204:	fe 01       	movw	r30, r28
    1206:	e5 5a       	subi	r30, 0xA5	; 165
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	0c f0       	brlt	.+2      	; 0x1224 <LCD_sendCommand+0xd0>
    1222:	43 c0       	rjmp	.+134    	; 0x12aa <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	fe 01       	movw	r30, r28
    1226:	e1 5a       	subi	r30, 0xA1	; 161
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8e 01       	movw	r16, r28
    1244:	07 5a       	subi	r16, 0xA7	; 167
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	1f c0       	rjmp	.+62     	; 0x129a <LCD_sendCommand+0x146>
    125c:	fe 01       	movw	r30, r28
    125e:	e9 5a       	subi	r30, 0xA9	; 169
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	88 ec       	ldi	r24, 0xC8	; 200
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    126a:	fe 01       	movw	r30, r28
    126c:	e9 5a       	subi	r30, 0xA9	; 169
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x120>
    1278:	fe 01       	movw	r30, r28
    127a:	e9 5a       	subi	r30, 0xA9	; 169
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	de 01       	movw	r26, r28
    1284:	a7 5a       	subi	r26, 0xA7	; 167
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	e7 5a       	subi	r30, 0xA7	; 167
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	9c 93       	st	X, r25
    1298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	fe 01       	movw	r30, r28
    129c:	e7 5a       	subi	r30, 0xA7	; 167
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	d1 f6       	brne	.-76     	; 0x125c <LCD_sendCommand+0x108>
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12aa:	8e 01       	movw	r16, r28
    12ac:	07 5a       	subi	r16, 0xA7	; 167
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	fe 01       	movw	r30, r28
    12b2:	e5 5a       	subi	r30, 0xA5	; 165
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
    12cc:	de 01       	movw	r26, r28
    12ce:	ab 5a       	subi	r26, 0xAB	; 171
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e7 5a       	subi	r30, 0xA7	; 167
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	8d 93       	st	X+, r24
    12de:	9c 93       	st	X, r25
    12e0:	fe 01       	movw	r30, r28
    12e2:	eb 5a       	subi	r30, 0xAB	; 171
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_sendCommand+0x196>
    12ee:	fe 01       	movw	r30, r28
    12f0:	eb 5a       	subi	r30, 0xAB	; 171
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    12f8:	ab e3       	ldi	r26, 0x3B	; 59
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	8c 93       	st	X, r24
    1306:	fe 01       	movw	r30, r28
    1308:	ef 5a       	subi	r30, 0xAF	; 175
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e8       	ldi	r26, 0x80	; 128
    1312:	bf e3       	ldi	r27, 0x3F	; 63
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	8e 01       	movw	r16, r28
    131e:	03 5b       	subi	r16, 0xB3	; 179
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	fe 01       	movw	r30, r28
    1324:	ef 5a       	subi	r30, 0xAF	; 175
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a ef       	ldi	r20, 0xFA	; 250
    1336:	54 e4       	ldi	r21, 0x44	; 68
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	f8 01       	movw	r30, r16
    1342:	80 83       	st	Z, r24
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	a2 83       	std	Z+2, r26	; 0x02
    1348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    134a:	fe 01       	movw	r30, r28
    134c:	e3 5b       	subi	r30, 0xB3	; 179
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	44 f4       	brge	.+16     	; 0x1378 <LCD_sendCommand+0x224>
		__ticks = 1;
    1368:	fe 01       	movw	r30, r28
    136a:	e5 5b       	subi	r30, 0xB5	; 181
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
    1376:	64 c0       	rjmp	.+200    	; 0x1440 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1378:	fe 01       	movw	r30, r28
    137a:	e3 5b       	subi	r30, 0xB3	; 179
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <LCD_sendCommand+0x244>
    1396:	43 c0       	rjmp	.+134    	; 0x141e <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	fe 01       	movw	r30, r28
    139a:	ef 5a       	subi	r30, 0xAF	; 175
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8e 01       	movw	r16, r28
    13b8:	05 5b       	subi	r16, 0xB5	; 181
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	f8 01       	movw	r30, r16
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
    13ce:	1f c0       	rjmp	.+62     	; 0x140e <LCD_sendCommand+0x2ba>
    13d0:	fe 01       	movw	r30, r28
    13d2:	e7 5b       	subi	r30, 0xB7	; 183
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5b       	subi	r30, 0xB7	; 183
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <LCD_sendCommand+0x294>
    13ec:	fe 01       	movw	r30, r28
    13ee:	e7 5b       	subi	r30, 0xB7	; 183
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	de 01       	movw	r26, r28
    13f8:	a5 5b       	subi	r26, 0xB5	; 181
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e5 5b       	subi	r30, 0xB5	; 181
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	fe 01       	movw	r30, r28
    1410:	e5 5b       	subi	r30, 0xB5	; 181
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	d1 f6       	brne	.-76     	; 0x13d0 <LCD_sendCommand+0x27c>
    141c:	27 c0       	rjmp	.+78     	; 0x146c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	8e 01       	movw	r16, r28
    1420:	05 5b       	subi	r16, 0xB5	; 181
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	fe 01       	movw	r30, r28
    1426:	e3 5b       	subi	r30, 0xB3	; 179
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	de 01       	movw	r26, r28
    1442:	a9 5b       	subi	r26, 0xB9	; 185
    1444:	bf 4f       	sbci	r27, 0xFF	; 255
    1446:	fe 01       	movw	r30, r28
    1448:	e5 5b       	subi	r30, 0xB5	; 181
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	8d 93       	st	X+, r24
    1452:	9c 93       	st	X, r25
    1454:	fe 01       	movw	r30, r28
    1456:	e9 5b       	subi	r30, 0xB9	; 185
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <LCD_sendCommand+0x30a>
    1462:	fe 01       	movw	r30, r28
    1464:	e9 5b       	subi	r30, 0xB9	; 185
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    146c:	ab e3       	ldi	r26, 0x3B	; 59
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	eb e3       	ldi	r30, 0x3B	; 59
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	98 2f       	mov	r25, r24
    1478:	9f 70       	andi	r25, 0x0F	; 15
    147a:	fe 01       	movw	r30, r28
    147c:	ed 59       	subi	r30, 0x9D	; 157
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	80 7f       	andi	r24, 0xF0	; 240
    1484:	89 2b       	or	r24, r25
    1486:	8c 93       	st	X, r24
    1488:	fe 01       	movw	r30, r28
    148a:	ed 5b       	subi	r30, 0xBD	; 189
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e8       	ldi	r26, 0x80	; 128
    1494:	bf e3       	ldi	r27, 0x3F	; 63
    1496:	80 83       	st	Z, r24
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a2 83       	std	Z+2, r26	; 0x02
    149c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	8e 01       	movw	r16, r28
    14a0:	01 5c       	subi	r16, 0xC1	; 193
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	fe 01       	movw	r30, r28
    14a6:	ed 5b       	subi	r30, 0xBD	; 189
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a ef       	ldi	r20, 0xFA	; 250
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	80 83       	st	Z, r24
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	a2 83       	std	Z+2, r26	; 0x02
    14ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14cc:	fe 01       	movw	r30, r28
    14ce:	ff 96       	adiw	r30, 0x3f	; 63
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <LCD_sendCommand+0x39e>
		__ticks = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9e af       	std	Y+62, r25	; 0x3e
    14ee:	8d af       	std	Y+61, r24	; 0x3d
    14f0:	46 c0       	rjmp	.+140    	; 0x157e <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    14f2:	fe 01       	movw	r30, r28
    14f4:	ff 96       	adiw	r30, 0x3f	; 63
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	64 f5       	brge	.+88     	; 0x1566 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	fe 01       	movw	r30, r28
    1510:	ed 5b       	subi	r30, 0xBD	; 189
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e af       	std	Y+62, r25	; 0x3e
    153a:	8d af       	std	Y+61, r24	; 0x3d
    153c:	0f c0       	rjmp	.+30     	; 0x155c <LCD_sendCommand+0x408>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c af       	std	Y+60, r25	; 0x3c
    1544:	8b af       	std	Y+59, r24	; 0x3b
    1546:	8b ad       	ldd	r24, Y+59	; 0x3b
    1548:	9c ad       	ldd	r25, Y+60	; 0x3c
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_sendCommand+0x3f6>
    154e:	9c af       	std	Y+60, r25	; 0x3c
    1550:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8d ad       	ldd	r24, Y+61	; 0x3d
    1554:	9e ad       	ldd	r25, Y+62	; 0x3e
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e af       	std	Y+62, r25	; 0x3e
    155a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8d ad       	ldd	r24, Y+61	; 0x3d
    155e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <LCD_sendCommand+0x3ea>
    1564:	16 c0       	rjmp	.+44     	; 0x1592 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	fe 01       	movw	r30, r28
    1568:	ff 96       	adiw	r30, 0x3f	; 63
    156a:	60 81       	ld	r22, Z
    156c:	71 81       	ldd	r23, Z+1	; 0x01
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9e af       	std	Y+62, r25	; 0x3e
    157c:	8d af       	std	Y+61, r24	; 0x3d
    157e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1580:	9e ad       	ldd	r25, Y+62	; 0x3e
    1582:	9a af       	std	Y+58, r25	; 0x3a
    1584:	89 af       	std	Y+57, r24	; 0x39
    1586:	89 ad       	ldd	r24, Y+57	; 0x39
    1588:	9a ad       	ldd	r25, Y+58	; 0x3a
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <LCD_sendCommand+0x436>
    158e:	9a af       	std	Y+58, r25	; 0x3a
    1590:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	8c 93       	st	X, r24
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e8       	ldi	r26, 0x80	; 128
    15a6:	bf e3       	ldi	r27, 0x3F	; 63
    15a8:	8d ab       	std	Y+53, r24	; 0x35
    15aa:	9e ab       	std	Y+54, r25	; 0x36
    15ac:	af ab       	std	Y+55, r26	; 0x37
    15ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6d a9       	ldd	r22, Y+53	; 0x35
    15b2:	7e a9       	ldd	r23, Y+54	; 0x36
    15b4:	8f a9       	ldd	r24, Y+55	; 0x37
    15b6:	98 ad       	ldd	r25, Y+56	; 0x38
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a ef       	ldi	r20, 0xFA	; 250
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	89 ab       	std	Y+49, r24	; 0x31
    15ca:	9a ab       	std	Y+50, r25	; 0x32
    15cc:	ab ab       	std	Y+51, r26	; 0x33
    15ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15d0:	69 a9       	ldd	r22, Y+49	; 0x31
    15d2:	7a a9       	ldd	r23, Y+50	; 0x32
    15d4:	8b a9       	ldd	r24, Y+51	; 0x33
    15d6:	9c a9       	ldd	r25, Y+52	; 0x34
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <LCD_sendCommand+0x49e>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	98 ab       	std	Y+48, r25	; 0x30
    15ee:	8f a7       	std	Y+47, r24	; 0x2f
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    15f2:	69 a9       	ldd	r22, Y+49	; 0x31
    15f4:	7a a9       	ldd	r23, Y+50	; 0x32
    15f6:	8b a9       	ldd	r24, Y+51	; 0x33
    15f8:	9c a9       	ldd	r25, Y+52	; 0x34
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6d a9       	ldd	r22, Y+53	; 0x35
    160c:	7e a9       	ldd	r23, Y+54	; 0x36
    160e:	8f a9       	ldd	r24, Y+55	; 0x37
    1610:	98 ad       	ldd	r25, Y+56	; 0x38
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	98 ab       	std	Y+48, r25	; 0x30
    1630:	8f a7       	std	Y+47, r24	; 0x2f
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <LCD_sendCommand+0x4fe>
    1634:	88 ec       	ldi	r24, 0xC8	; 200
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9e a7       	std	Y+46, r25	; 0x2e
    163a:	8d a7       	std	Y+45, r24	; 0x2d
    163c:	8d a5       	ldd	r24, Y+45	; 0x2d
    163e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_sendCommand+0x4ec>
    1644:	9e a7       	std	Y+46, r25	; 0x2e
    1646:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8f a5       	ldd	r24, Y+47	; 0x2f
    164a:	98 a9       	ldd	r25, Y+48	; 0x30
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	98 ab       	std	Y+48, r25	; 0x30
    1650:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8f a5       	ldd	r24, Y+47	; 0x2f
    1654:	98 a9       	ldd	r25, Y+48	; 0x30
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <LCD_sendCommand+0x4e0>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	69 a9       	ldd	r22, Y+49	; 0x31
    165e:	7a a9       	ldd	r23, Y+50	; 0x32
    1660:	8b a9       	ldd	r24, Y+51	; 0x33
    1662:	9c a9       	ldd	r25, Y+52	; 0x34
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	98 ab       	std	Y+48, r25	; 0x30
    166e:	8f a7       	std	Y+47, r24	; 0x2f
    1670:	8f a5       	ldd	r24, Y+47	; 0x2f
    1672:	98 a9       	ldd	r25, Y+48	; 0x30
    1674:	9c a7       	std	Y+44, r25	; 0x2c
    1676:	8b a7       	std	Y+43, r24	; 0x2b
    1678:	8b a5       	ldd	r24, Y+43	; 0x2b
    167a:	9c a5       	ldd	r25, Y+44	; 0x2c
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_sendCommand+0x528>
    1680:	9c a7       	std	Y+44, r25	; 0x2c
    1682:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1684:	ab e3       	ldi	r26, 0x3B	; 59
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	88 60       	ori	r24, 0x08	; 8
    1690:	8c 93       	st	X, r24
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e8       	ldi	r26, 0x80	; 128
    1698:	bf e3       	ldi	r27, 0x3F	; 63
    169a:	8f a3       	std	Y+39, r24	; 0x27
    169c:	98 a7       	std	Y+40, r25	; 0x28
    169e:	a9 a7       	std	Y+41, r26	; 0x29
    16a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6f a1       	ldd	r22, Y+39	; 0x27
    16a4:	78 a5       	ldd	r23, Y+40	; 0x28
    16a6:	89 a5       	ldd	r24, Y+41	; 0x29
    16a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a ef       	ldi	r20, 0xFA	; 250
    16b0:	54 e4       	ldi	r21, 0x44	; 68
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8b a3       	std	Y+35, r24	; 0x23
    16bc:	9c a3       	std	Y+36, r25	; 0x24
    16be:	ad a3       	std	Y+37, r26	; 0x25
    16c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16c2:	6b a1       	ldd	r22, Y+35	; 0x23
    16c4:	7c a1       	ldd	r23, Y+36	; 0x24
    16c6:	8d a1       	ldd	r24, Y+37	; 0x25
    16c8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_sendCommand+0x590>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9a a3       	std	Y+34, r25	; 0x22
    16e0:	89 a3       	std	Y+33, r24	; 0x21
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    16e4:	6b a1       	ldd	r22, Y+35	; 0x23
    16e6:	7c a1       	ldd	r23, Y+36	; 0x24
    16e8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ea:	9e a1       	ldd	r25, Y+38	; 0x26
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6f a1       	ldd	r22, Y+39	; 0x27
    16fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1700:	89 a5       	ldd	r24, Y+41	; 0x29
    1702:	9a a5       	ldd	r25, Y+42	; 0x2a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9a a3       	std	Y+34, r25	; 0x22
    1722:	89 a3       	std	Y+33, r24	; 0x21
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_sendCommand+0x5f0>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	98 a3       	std	Y+32, r25	; 0x20
    172c:	8f 8f       	std	Y+31, r24	; 0x1f
    172e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1730:	98 a1       	ldd	r25, Y+32	; 0x20
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_sendCommand+0x5de>
    1736:	98 a3       	std	Y+32, r25	; 0x20
    1738:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	89 a1       	ldd	r24, Y+33	; 0x21
    173c:	9a a1       	ldd	r25, Y+34	; 0x22
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_sendCommand+0x5d2>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6b a1       	ldd	r22, Y+35	; 0x23
    1750:	7c a1       	ldd	r23, Y+36	; 0x24
    1752:	8d a1       	ldd	r24, Y+37	; 0x25
    1754:	9e a1       	ldd	r25, Y+38	; 0x26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	89 a1       	ldd	r24, Y+33	; 0x21
    1764:	9a a1       	ldd	r25, Y+34	; 0x22
    1766:	9e 8f       	std	Y+30, r25	; 0x1e
    1768:	8d 8f       	std	Y+29, r24	; 0x1d
    176a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    176c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_sendCommand+0x61a>
    1772:	9e 8f       	std	Y+30, r25	; 0x1e
    1774:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1776:	ab e3       	ldi	r26, 0x3B	; 59
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	2f 70       	andi	r18, 0x0F	; 15
    1784:	fe 01       	movw	r30, r28
    1786:	ed 59       	subi	r30, 0x9D	; 157
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	82 95       	swap	r24
    1792:	92 95       	swap	r25
    1794:	90 7f       	andi	r25, 0xF0	; 240
    1796:	98 27       	eor	r25, r24
    1798:	80 7f       	andi	r24, 0xF0	; 240
    179a:	98 27       	eor	r25, r24
    179c:	82 2b       	or	r24, r18
    179e:	8c 93       	st	X, r24
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 e8       	ldi	r26, 0x80	; 128
    17a6:	bf e3       	ldi	r27, 0x3F	; 63
    17a8:	89 8f       	std	Y+25, r24	; 0x19
    17aa:	9a 8f       	std	Y+26, r25	; 0x1a
    17ac:	ab 8f       	std	Y+27, r26	; 0x1b
    17ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b0:	69 8d       	ldd	r22, Y+25	; 0x19
    17b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4a ef       	ldi	r20, 0xFA	; 250
    17be:	54 e4       	ldi	r21, 0x44	; 68
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	8d 8b       	std	Y+21, r24	; 0x15
    17ca:	9e 8b       	std	Y+22, r25	; 0x16
    17cc:	af 8b       	std	Y+23, r26	; 0x17
    17ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d0:	6d 89       	ldd	r22, Y+21	; 0x15
    17d2:	7e 89       	ldd	r23, Y+22	; 0x16
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <LCD_sendCommand+0x69e>
		__ticks = 1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 8b       	std	Y+20, r25	; 0x14
    17ee:	8b 8b       	std	Y+19, r24	; 0x13
    17f0:	3f c0       	rjmp	.+126    	; 0x1870 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    17f2:	6d 89       	ldd	r22, Y+21	; 0x15
    17f4:	7e 89       	ldd	r23, Y+22	; 0x16
    17f6:	8f 89       	ldd	r24, Y+23	; 0x17
    17f8:	98 8d       	ldd	r25, Y+24	; 0x18
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	3f ef       	ldi	r19, 0xFF	; 255
    17fe:	4f e7       	ldi	r20, 0x7F	; 127
    1800:	57 e4       	ldi	r21, 0x47	; 71
    1802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1806:	18 16       	cp	r1, r24
    1808:	4c f5       	brge	.+82     	; 0x185c <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180a:	69 8d       	ldd	r22, Y+25	; 0x19
    180c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9c 8b       	std	Y+20, r25	; 0x14
    1830:	8b 8b       	std	Y+19, r24	; 0x13
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <LCD_sendCommand+0x6fe>
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9a 8b       	std	Y+18, r25	; 0x12
    183a:	89 8b       	std	Y+17, r24	; 0x11
    183c:	89 89       	ldd	r24, Y+17	; 0x11
    183e:	9a 89       	ldd	r25, Y+18	; 0x12
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_sendCommand+0x6ec>
    1844:	9a 8b       	std	Y+18, r25	; 0x12
    1846:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1848:	8b 89       	ldd	r24, Y+19	; 0x13
    184a:	9c 89       	ldd	r25, Y+20	; 0x14
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	69 f7       	brne	.-38     	; 0x1834 <LCD_sendCommand+0x6e0>
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	6d 89       	ldd	r22, Y+21	; 0x15
    185e:	7e 89       	ldd	r23, Y+22	; 0x16
    1860:	8f 89       	ldd	r24, Y+23	; 0x17
    1862:	98 8d       	ldd	r25, Y+24	; 0x18
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9c 8b       	std	Y+20, r25	; 0x14
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	8b 89       	ldd	r24, Y+19	; 0x13
    1872:	9c 89       	ldd	r25, Y+20	; 0x14
    1874:	98 8b       	std	Y+16, r25	; 0x10
    1876:	8f 87       	std	Y+15, r24	; 0x0f
    1878:	8f 85       	ldd	r24, Y+15	; 0x0f
    187a:	98 89       	ldd	r25, Y+16	; 0x10
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_sendCommand+0x728>
    1880:	98 8b       	std	Y+16, r25	; 0x10
    1882:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1884:	ab e3       	ldi	r26, 0x3B	; 59
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e3       	ldi	r30, 0x3B	; 59
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	87 7f       	andi	r24, 0xF7	; 247
    1890:	8c 93       	st	X, r24
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e8       	ldi	r26, 0x80	; 128
    1898:	bf e3       	ldi	r27, 0x3F	; 63
    189a:	8b 87       	std	Y+11, r24	; 0x0b
    189c:	9c 87       	std	Y+12, r25	; 0x0c
    189e:	ad 87       	std	Y+13, r26	; 0x0d
    18a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8f 83       	std	Y+7, r24	; 0x07
    18bc:	98 87       	std	Y+8, r25	; 0x08
    18be:	a9 87       	std	Y+9, r26	; 0x09
    18c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <LCD_sendCommand+0x790>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <LCD_sendCommand+0x7f0>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_sendCommand+0x7de>
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <LCD_sendCommand+0x7d2>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_sendCommand+0x81a>
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1976:	cd 59       	subi	r28, 0x9D	; 157
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <LCD_displayCharacter>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayCharacter(uint8 data)
{
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	c3 56       	subi	r28, 0x63	; 99
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	fe 01       	movw	r30, r28
    19aa:	ed 59       	subi	r30, 0x9D	; 157
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 83       	st	Z, r24
	Set_Bit(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    19b0:	ab e3       	ldi	r26, 0x3B	; 59
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	82 60       	ori	r24, 0x02	; 2
    19bc:	8c 93       	st	X, r24
	Clear_Bit(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19be:	ab e3       	ldi	r26, 0x3B	; 59
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8b 7f       	andi	r24, 0xFB	; 251
    19ca:	8c 93       	st	X, r24
    19cc:	fe 01       	movw	r30, r28
    19ce:	e1 5a       	subi	r30, 0xA1	; 161
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e8       	ldi	r26, 0x80	; 128
    19d8:	bf e3       	ldi	r27, 0x3F	; 63
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	8e 01       	movw	r16, r28
    19e4:	05 5a       	subi	r16, 0xA5	; 165
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	e1 5a       	subi	r30, 0xA1	; 161
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e5 5a       	subi	r30, 0xA5	; 165
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	44 f4       	brge	.+16     	; 0x1a3e <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e7 5a       	subi	r30, 0xA7	; 167
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	64 c0       	rjmp	.+200    	; 0x1b06 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e5 5a       	subi	r30, 0xA5	; 165
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <LCD_displayCharacter+0xd0>
    1a5c:	43 c0       	rjmp	.+134    	; 0x1ae4 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e1 5a       	subi	r30, 0xA1	; 161
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	07 5a       	subi	r16, 0xA7	; 167
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	f8 01       	movw	r30, r16
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <LCD_displayCharacter+0x146>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e9 5a       	subi	r30, 0xA9	; 169
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e9 5a       	subi	r30, 0xA9	; 169
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayCharacter+0x120>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 5a       	subi	r30, 0xA9	; 169
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	de 01       	movw	r26, r28
    1abe:	a7 5a       	subi	r26, 0xA7	; 167
    1ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 5a       	subi	r30, 0xA7	; 167
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	11 96       	adiw	r26, 0x01	; 1
    1ad0:	9c 93       	st	X, r25
    1ad2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5a       	subi	r30, 0xA7	; 167
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	d1 f6       	brne	.-76     	; 0x1a96 <LCD_displayCharacter+0x108>
    1ae2:	27 c0       	rjmp	.+78     	; 0x1b32 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	8e 01       	movw	r16, r28
    1ae6:	07 5a       	subi	r16, 0xA7	; 167
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	e5 5a       	subi	r30, 0xA5	; 165
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	de 01       	movw	r26, r28
    1b08:	ab 5a       	subi	r26, 0xAB	; 171
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e7 5a       	subi	r30, 0xA7	; 167
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	8d 93       	st	X+, r24
    1b18:	9c 93       	st	X, r25
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	eb 5a       	subi	r30, 0xAB	; 171
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_displayCharacter+0x196>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	eb 5a       	subi	r30, 0xAB	; 171
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 60       	ori	r24, 0x08	; 8
    1b3e:	8c 93       	st	X, r24
    1b40:	fe 01       	movw	r30, r28
    1b42:	ef 5a       	subi	r30, 0xAF	; 175
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e8       	ldi	r26, 0x80	; 128
    1b4c:	bf e3       	ldi	r27, 0x3F	; 63
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	8e 01       	movw	r16, r28
    1b58:	03 5b       	subi	r16, 0xB3	; 179
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ef 5a       	subi	r30, 0xAF	; 175
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	80 83       	st	Z, r24
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	a2 83       	std	Z+2, r26	; 0x02
    1b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e3 5b       	subi	r30, 0xB3	; 179
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	44 f4       	brge	.+16     	; 0x1bb2 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e5 5b       	subi	r30, 0xB5	; 181
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	64 c0       	rjmp	.+200    	; 0x1c7a <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e3 5b       	subi	r30, 0xB3	; 179
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <LCD_displayCharacter+0x244>
    1bd0:	43 c0       	rjmp	.+134    	; 0x1c58 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8e 01       	movw	r16, r28
    1bf2:	05 5b       	subi	r16, 0xB5	; 181
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	f8 01       	movw	r30, r16
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	1f c0       	rjmp	.+62     	; 0x1c48 <LCD_displayCharacter+0x2ba>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5b       	subi	r30, 0xB7	; 183
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	88 ec       	ldi	r24, 0xC8	; 200
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e7 5b       	subi	r30, 0xB7	; 183
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_displayCharacter+0x294>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e7 5b       	subi	r30, 0xB7	; 183
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	de 01       	movw	r26, r28
    1c32:	a5 5b       	subi	r26, 0xB5	; 181
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5b       	subi	r30, 0xB5	; 181
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	9c 93       	st	X, r25
    1c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	d1 f6       	brne	.-76     	; 0x1c0a <LCD_displayCharacter+0x27c>
    1c56:	27 c0       	rjmp	.+78     	; 0x1ca6 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	05 5b       	subi	r16, 0xB5	; 181
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 5b       	subi	r30, 0xB3	; 179
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a9 5b       	subi	r26, 0xB9	; 185
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e5 5b       	subi	r30, 0xB5	; 181
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	8d 93       	st	X+, r24
    1c8c:	9c 93       	st	X, r25
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 5b       	subi	r30, 0xB9	; 185
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_displayCharacter+0x30a>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e9 5b       	subi	r30, 0xB9	; 185
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	9f 70       	andi	r25, 0x0F	; 15
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ed 59       	subi	r30, 0x9D	; 157
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 7f       	andi	r24, 0xF0	; 240
    1cbe:	89 2b       	or	r24, r25
    1cc0:	8c 93       	st	X, r24
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ed 5b       	subi	r30, 0xBD	; 189
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e8       	ldi	r26, 0x80	; 128
    1cce:	bf e3       	ldi	r27, 0x3F	; 63
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	8e 01       	movw	r16, r28
    1cda:	01 5c       	subi	r16, 0xC1	; 193
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ed 5b       	subi	r30, 0xBD	; 189
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a ef       	ldi	r20, 0xFA	; 250
    1cf2:	54 e4       	ldi	r21, 0x44	; 68
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	80 83       	st	Z, r24
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	a2 83       	std	Z+2, r26	; 0x02
    1d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d06:	fe 01       	movw	r30, r28
    1d08:	ff 96       	adiw	r30, 0x3f	; 63
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e af       	std	Y+62, r25	; 0x3e
    1d28:	8d af       	std	Y+61, r24	; 0x3d
    1d2a:	46 c0       	rjmp	.+140    	; 0x1db8 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ff 96       	adiw	r30, 0x3f	; 63
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	64 f5       	brge	.+88     	; 0x1da0 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 5b       	subi	r30, 0xBD	; 189
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e af       	std	Y+62, r25	; 0x3e
    1d74:	8d af       	std	Y+61, r24	; 0x3d
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_displayCharacter+0x408>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c af       	std	Y+60, r25	; 0x3c
    1d7e:	8b af       	std	Y+59, r24	; 0x3b
    1d80:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d82:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_displayCharacter+0x3f6>
    1d88:	9c af       	std	Y+60, r25	; 0x3c
    1d8a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9e af       	std	Y+62, r25	; 0x3e
    1d94:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_displayCharacter+0x3ea>
    1d9e:	16 c0       	rjmp	.+44     	; 0x1dcc <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	fe 01       	movw	r30, r28
    1da2:	ff 96       	adiw	r30, 0x3f	; 63
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9e af       	std	Y+62, r25	; 0x3e
    1db6:	8d af       	std	Y+61, r24	; 0x3d
    1db8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dbc:	9a af       	std	Y+58, r25	; 0x3a
    1dbe:	89 af       	std	Y+57, r24	; 0x39
    1dc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_displayCharacter+0x436>
    1dc8:	9a af       	std	Y+58, r25	; 0x3a
    1dca:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	87 7f       	andi	r24, 0xF7	; 247
    1dd8:	8c 93       	st	X, r24
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	8d ab       	std	Y+53, r24	; 0x35
    1de4:	9e ab       	std	Y+54, r25	; 0x36
    1de6:	af ab       	std	Y+55, r26	; 0x37
    1de8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6d a9       	ldd	r22, Y+53	; 0x35
    1dec:	7e a9       	ldd	r23, Y+54	; 0x36
    1dee:	8f a9       	ldd	r24, Y+55	; 0x37
    1df0:	98 ad       	ldd	r25, Y+56	; 0x38
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a ef       	ldi	r20, 0xFA	; 250
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	89 ab       	std	Y+49, r24	; 0x31
    1e04:	9a ab       	std	Y+50, r25	; 0x32
    1e06:	ab ab       	std	Y+51, r26	; 0x33
    1e08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6d a9       	ldd	r22, Y+53	; 0x35
    1e46:	7e a9       	ldd	r23, Y+54	; 0x36
    1e48:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	98 ab       	std	Y+48, r25	; 0x30
    1e6a:	8f a7       	std	Y+47, r24	; 0x2f
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <LCD_displayCharacter+0x4fe>
    1e6e:	88 ec       	ldi	r24, 0xC8	; 200
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e a7       	std	Y+46, r25	; 0x2e
    1e74:	8d a7       	std	Y+45, r24	; 0x2d
    1e76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_displayCharacter+0x4ec>
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <LCD_displayCharacter+0x4e0>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	69 a9       	ldd	r22, Y+49	; 0x31
    1e98:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	9c a7       	std	Y+44, r25	; 0x2c
    1eb0:	8b a7       	std	Y+43, r24	; 0x2b
    1eb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_displayCharacter+0x528>
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ebe:	ab e3       	ldi	r26, 0x3B	; 59
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 60       	ori	r24, 0x08	; 8
    1eca:	8c 93       	st	X, r24
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8f a3       	std	Y+39, r24	; 0x27
    1ed6:	98 a7       	std	Y+40, r25	; 0x28
    1ed8:	a9 a7       	std	Y+41, r26	; 0x29
    1eda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ede:	78 a5       	ldd	r23, Y+40	; 0x28
    1ee0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ee2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8b a3       	std	Y+35, r24	; 0x23
    1ef6:	9c a3       	std	Y+36, r25	; 0x24
    1ef8:	ad a3       	std	Y+37, r26	; 0x25
    1efa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1efc:	6b a1       	ldd	r22, Y+35	; 0x23
    1efe:	7c a1       	ldd	r23, Y+36	; 0x24
    1f00:	8d a1       	ldd	r24, Y+37	; 0x25
    1f02:	9e a1       	ldd	r25, Y+38	; 0x26
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <LCD_displayCharacter+0x590>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9a a3       	std	Y+34, r25	; 0x22
    1f1a:	89 a3       	std	Y+33, r24	; 0x21
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6f a1       	ldd	r22, Y+39	; 0x27
    1f38:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9a a3       	std	Y+34, r25	; 0x22
    1f5c:	89 a3       	std	Y+33, r24	; 0x21
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_displayCharacter+0x5f0>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	98 a3       	std	Y+32, r25	; 0x20
    1f66:	8f 8f       	std	Y+31, r24	; 0x1f
    1f68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_displayCharacter+0x5de>
    1f70:	98 a3       	std	Y+32, r25	; 0x20
    1f72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	89 a1       	ldd	r24, Y+33	; 0x21
    1f76:	9a a1       	ldd	r25, Y+34	; 0x22
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9a a3       	std	Y+34, r25	; 0x22
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f80:	9a a1       	ldd	r25, Y+34	; 0x22
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <LCD_displayCharacter+0x5d2>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6b a1       	ldd	r22, Y+35	; 0x23
    1f8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
    1f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa2:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_displayCharacter+0x61a>
    1fac:	9e 8f       	std	Y+30, r25	; 0x1e
    1fae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1fb0:	ab e3       	ldi	r26, 0x3B	; 59
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	eb e3       	ldi	r30, 0x3B	; 59
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	2f 70       	andi	r18, 0x0F	; 15
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	ed 59       	subi	r30, 0x9D	; 157
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	82 95       	swap	r24
    1fcc:	92 95       	swap	r25
    1fce:	90 7f       	andi	r25, 0xF0	; 240
    1fd0:	98 27       	eor	r25, r24
    1fd2:	80 7f       	andi	r24, 0xF0	; 240
    1fd4:	98 27       	eor	r25, r24
    1fd6:	82 2b       	or	r24, r18
    1fd8:	8c 93       	st	X, r24
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e8       	ldi	r26, 0x80	; 128
    1fe0:	bf e3       	ldi	r27, 0x3F	; 63
    1fe2:	89 8f       	std	Y+25, r24	; 0x19
    1fe4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	69 8d       	ldd	r22, Y+25	; 0x19
    1fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8d 8b       	std	Y+21, r24	; 0x15
    2004:	9e 8b       	std	Y+22, r25	; 0x16
    2006:	af 8b       	std	Y+23, r26	; 0x17
    2008:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 8b       	std	Y+20, r25	; 0x14
    2028:	8b 8b       	std	Y+19, r24	; 0x13
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	69 8d       	ldd	r22, Y+25	; 0x19
    2046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	0f c0       	rjmp	.+30     	; 0x208c <LCD_displayCharacter+0x6fe>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9a 8b       	std	Y+18, r25	; 0x12
    2074:	89 8b       	std	Y+17, r24	; 0x11
    2076:	89 89       	ldd	r24, Y+17	; 0x11
    2078:	9a 89       	ldd	r25, Y+18	; 0x12
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_displayCharacter+0x6ec>
    207e:	9a 8b       	std	Y+18, r25	; 0x12
    2080:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9c 8b       	std	Y+20, r25	; 0x14
    208a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <LCD_displayCharacter+0x6e0>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	8b 89       	ldd	r24, Y+19	; 0x13
    20ac:	9c 89       	ldd	r25, Y+20	; 0x14
    20ae:	98 8b       	std	Y+16, r25	; 0x10
    20b0:	8f 87       	std	Y+15, r24	; 0x0f
    20b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b4:	98 89       	ldd	r25, Y+16	; 0x10
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_displayCharacter+0x728>
    20ba:	98 8b       	std	Y+16, r25	; 0x10
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    20be:	ab e3       	ldi	r26, 0x3B	; 59
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	eb e3       	ldi	r30, 0x3B	; 59
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	87 7f       	andi	r24, 0xF7	; 247
    20ca:	8c 93       	st	X, r24
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e8       	ldi	r26, 0x80	; 128
    20d2:	bf e3       	ldi	r27, 0x3F	; 63
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a ef       	ldi	r20, 0xFA	; 250
    20ea:	54 e4       	ldi	r21, 0x44	; 68
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_displayCharacter+0x790>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_displayCharacter+0x7f0>
    2160:	88 ec       	ldi	r24, 0xC8	; 200
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_displayCharacter+0x7de>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <LCD_displayCharacter+0x7d2>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_displayCharacter+0x81a>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21b0:	cd 59       	subi	r28, 0x9D	; 157
    21b2:	df 4f       	sbci	r29, 0xFF	; 255
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	08 95       	ret

000021c8 <LCD_displayString>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayString(const char *Str)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <LCD_displayString+0x6>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9b 83       	std	Y+3, r25	; 0x03
    21d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21d8:	19 82       	std	Y+1, r1	; 0x01
    21da:	0e c0       	rjmp	.+28     	; 0x21f8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	80 81       	ld	r24, Z
    21ee:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
		i++;
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	89 83       	std	Y+1, r24	; 0x01
 * Return		 : void
 **************************************************************************/
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	80 81       	ld	r24, Z
    220a:	88 23       	and	r24, r24
    220c:	39 f7       	brne	.-50     	; 0x21dc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <LCD_goToRowColumn>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <LCD_goToRowColumn+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <LCD_goToRowColumn+0x8>
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
    222a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	3d 83       	std	Y+5, r19	; 0x05
    2234:	2c 83       	std	Y+4, r18	; 0x04
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	9d 81       	ldd	r25, Y+5	; 0x05
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	91 05       	cpc	r25, r1
    223e:	c1 f0       	breq	.+48     	; 0x2270 <LCD_goToRowColumn+0x56>
    2240:	2c 81       	ldd	r18, Y+4	; 0x04
    2242:	3d 81       	ldd	r19, Y+5	; 0x05
    2244:	22 30       	cpi	r18, 0x02	; 2
    2246:	31 05       	cpc	r19, r1
    2248:	2c f4       	brge	.+10     	; 0x2254 <LCD_goToRowColumn+0x3a>
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	9d 81       	ldd	r25, Y+5	; 0x05
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	61 f0       	breq	.+24     	; 0x226a <LCD_goToRowColumn+0x50>
    2252:	19 c0       	rjmp	.+50     	; 0x2286 <LCD_goToRowColumn+0x6c>
    2254:	2c 81       	ldd	r18, Y+4	; 0x04
    2256:	3d 81       	ldd	r19, Y+5	; 0x05
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	31 05       	cpc	r19, r1
    225c:	69 f0       	breq	.+26     	; 0x2278 <LCD_goToRowColumn+0x5e>
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	83 30       	cpi	r24, 0x03	; 3
    2264:	91 05       	cpc	r25, r1
    2266:	61 f0       	breq	.+24     	; 0x2280 <LCD_goToRowColumn+0x66>
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	0b c0       	rjmp	.+22     	; 0x2286 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	80 5c       	subi	r24, 0xC0	; 192
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	80 5f       	subi	r24, 0xF0	; 240
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	80 5b       	subi	r24, 0xB0	; 176
    2284:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	80 68       	ori	r24, 0x80	; 128
    228a:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_displayStringRowColumn>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <LCD_displayStringRowColumn+0x6>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_displayStringRowColumn+0x8>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	6a 83       	std	Y+2, r22	; 0x02
    22ae:	5c 83       	std	Y+4, r21	; 0x04
    22b0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	6a 81       	ldd	r22, Y+2	; 0x02
    22b6:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_displayString>
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <LCD_intgerToString>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_intgerToString(int data)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	62 97       	sbiw	r28, 0x12	; 18
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	9a 8b       	std	Y+18, r25	; 0x12
    22e6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    22e8:	89 89       	ldd	r24, Y+17	; 0x11
    22ea:	9a 89       	ldd	r25, Y+18	; 0x12
    22ec:	9e 01       	movw	r18, r28
    22ee:	2f 5f       	subi	r18, 0xFF	; 255
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	b9 01       	movw	r22, r18
    22f4:	4a e0       	ldi	r20, 0x0A	; 10
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	0e 94 85 13 	call	0x270a	; 0x270a <itoa>
   LCD_displayString(buff);
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_displayString>
}
    2304:	62 96       	adiw	r28, 0x12	; 18
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <LCD_clearScreen>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_clearScreen(void)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_sendCommand>
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <__vector_10>:

//struct Timer0_config init={N_256,CTC_Normal};
static void (*OS_CallBackPtr_g)(void) = NULL;

ISR(TIMER0_COMP_vect)
{
    232a:	1f 92       	push	r1
    232c:	0f 92       	push	r0
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	0f 92       	push	r0
    2332:	11 24       	eor	r1, r1
    2334:	2f 93       	push	r18
    2336:	3f 93       	push	r19
    2338:	4f 93       	push	r20
    233a:	5f 93       	push	r21
    233c:	6f 93       	push	r22
    233e:	7f 93       	push	r23
    2340:	8f 93       	push	r24
    2342:	9f 93       	push	r25
    2344:	af 93       	push	r26
    2346:	bf 93       	push	r27
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	if(OS_CallBackPtr_g != NULL)
    2354:	80 91 7e 00 	lds	r24, 0x007E
    2358:	90 91 7f 00 	lds	r25, 0x007F
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	29 f0       	breq	.+10     	; 0x236a <__vector_10+0x40>
	{
		OS_CallBackPtr_g();
    2360:	e0 91 7e 00 	lds	r30, 0x007E
    2364:	f0 91 7f 00 	lds	r31, 0x007F
    2368:	09 95       	icall
	}
}
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	ff 91       	pop	r31
    2370:	ef 91       	pop	r30
    2372:	bf 91       	pop	r27
    2374:	af 91       	pop	r26
    2376:	9f 91       	pop	r25
    2378:	8f 91       	pop	r24
    237a:	7f 91       	pop	r23
    237c:	6f 91       	pop	r22
    237e:	5f 91       	pop	r21
    2380:	4f 91       	pop	r20
    2382:	3f 91       	pop	r19
    2384:	2f 91       	pop	r18
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	0f 90       	pop	r0
    238c:	1f 90       	pop	r1
    238e:	18 95       	reti

00002390 <timer0_init>:
void timer0_init(void)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2398:	e3 e5       	ldi	r30, 0x53	; 83
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	10 82       	st	Z, r1
	TCNT0=0;
    239e:	e2 e5       	ldi	r30, 0x52	; 82
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	10 82       	st	Z, r1
	//TCCR0|=(T0_config->PRE_SCALER)|(T0_config->Wave_generation_mode);
	Set_Bit(TIMSK,OCIE0);
    23a4:	a9 e5       	ldi	r26, 0x59	; 89
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e9 e5       	ldi	r30, 0x59	; 89
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	82 60       	ori	r24, 0x02	; 2
    23b0:	8c 93       	st	X, r24
	TCCR0|=(N_256)|(CTC_Normal);
    23b2:	a3 e5       	ldi	r26, 0x53	; 83
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e3 e5       	ldi	r30, 0x53	; 83
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8c 60       	ori	r24, 0x0C	; 12
    23be:	8c 93       	st	X, r24
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <Set_OCR_Value>:
void Set_OCR_Value(uint8 Tick_Time_ms)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <Set_OCR_Value+0x6>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	89 83       	std	Y+1, r24	; 0x01
	switch(Tick_Time_ms)
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3b 83       	std	Y+3, r19	; 0x03
    23dc:	2a 83       	std	Y+2, r18	; 0x02
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	91 05       	cpc	r25, r1
    23e6:	c9 f1       	breq	.+114    	; 0x245a <Set_OCR_Value+0x94>
    23e8:	2a 81       	ldd	r18, Y+2	; 0x02
    23ea:	3b 81       	ldd	r19, Y+3	; 0x03
    23ec:	25 30       	cpi	r18, 0x05	; 5
    23ee:	31 05       	cpc	r19, r1
    23f0:	84 f4       	brge	.+32     	; 0x2412 <Set_OCR_Value+0x4c>
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	91 05       	cpc	r25, r1
    23fa:	29 f1       	breq	.+74     	; 0x2446 <Set_OCR_Value+0x80>
    23fc:	2a 81       	ldd	r18, Y+2	; 0x02
    23fe:	3b 81       	ldd	r19, Y+3	; 0x03
    2400:	23 30       	cpi	r18, 0x03	; 3
    2402:	31 05       	cpc	r19, r1
    2404:	2c f5       	brge	.+74     	; 0x2450 <Set_OCR_Value+0x8a>
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	b1 f0       	breq	.+44     	; 0x243c <Set_OCR_Value+0x76>
    2410:	3d c0       	rjmp	.+122    	; 0x248c <Set_OCR_Value+0xc6>
    2412:	2a 81       	ldd	r18, Y+2	; 0x02
    2414:	3b 81       	ldd	r19, Y+3	; 0x03
    2416:	26 30       	cpi	r18, 0x06	; 6
    2418:	31 05       	cpc	r19, r1
    241a:	49 f1       	breq	.+82     	; 0x246e <Set_OCR_Value+0xa8>
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	86 30       	cpi	r24, 0x06	; 6
    2422:	91 05       	cpc	r25, r1
    2424:	fc f0       	brlt	.+62     	; 0x2464 <Set_OCR_Value+0x9e>
    2426:	2a 81       	ldd	r18, Y+2	; 0x02
    2428:	3b 81       	ldd	r19, Y+3	; 0x03
    242a:	27 30       	cpi	r18, 0x07	; 7
    242c:	31 05       	cpc	r19, r1
    242e:	21 f1       	breq	.+72     	; 0x2478 <Set_OCR_Value+0xb2>
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	9b 81       	ldd	r25, Y+3	; 0x03
    2434:	88 30       	cpi	r24, 0x08	; 8
    2436:	91 05       	cpc	r25, r1
    2438:	21 f1       	breq	.+72     	; 0x2482 <Set_OCR_Value+0xbc>
    243a:	28 c0       	rjmp	.+80     	; 0x248c <Set_OCR_Value+0xc6>
	{
	case 1u:
		OCR0=31u;
    243c:	ec e5       	ldi	r30, 0x5C	; 92
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	8f e1       	ldi	r24, 0x1F	; 31
    2442:	80 83       	st	Z, r24
    2444:	27 c0       	rjmp	.+78     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 2u:
		OCR0=62u;
    2446:	ec e5       	ldi	r30, 0x5C	; 92
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8e e3       	ldi	r24, 0x3E	; 62
    244c:	80 83       	st	Z, r24
    244e:	22 c0       	rjmp	.+68     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 3u:
		OCR0=94u;
    2450:	ec e5       	ldi	r30, 0x5C	; 92
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	8e e5       	ldi	r24, 0x5E	; 94
    2456:	80 83       	st	Z, r24
    2458:	1d c0       	rjmp	.+58     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 4u:
		OCR0=125u;
    245a:	ec e5       	ldi	r30, 0x5C	; 92
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	8d e7       	ldi	r24, 0x7D	; 125
    2460:	80 83       	st	Z, r24
    2462:	18 c0       	rjmp	.+48     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 5u:
		OCR0=156u;
    2464:	ec e5       	ldi	r30, 0x5C	; 92
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	8c e9       	ldi	r24, 0x9C	; 156
    246a:	80 83       	st	Z, r24
    246c:	13 c0       	rjmp	.+38     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 6u:
		OCR0=187u;
    246e:	ec e5       	ldi	r30, 0x5C	; 92
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	8b eb       	ldi	r24, 0xBB	; 187
    2474:	80 83       	st	Z, r24
    2476:	0e c0       	rjmp	.+28     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 7u:
		OCR0=219u;
    2478:	ec e5       	ldi	r30, 0x5C	; 92
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	8b ed       	ldi	r24, 0xDB	; 219
    247e:	80 83       	st	Z, r24
    2480:	09 c0       	rjmp	.+18     	; 0x2494 <Set_OCR_Value+0xce>
		break;
	case 8u:
		OCR0=250u;
    2482:	ec e5       	ldi	r30, 0x5C	; 92
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	8a ef       	ldi	r24, 0xFA	; 250
    2488:	80 83       	st	Z, r24
    248a:	04 c0       	rjmp	.+8      	; 0x2494 <Set_OCR_Value+0xce>
		break;
	default :
		OCR0=250u;
    248c:	ec e5       	ldi	r30, 0x5C	; 92
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	8a ef       	ldi	r24, 0xFA	; 250
    2492:	80 83       	st	Z, r24
		break;
	}
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <timer0_Deinit>:
void timer0_Deinit(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(TCCR0,CS00);
    24a8:	a3 e5       	ldi	r26, 0x53	; 83
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e3 e5       	ldi	r30, 0x53	; 83
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8e 7f       	andi	r24, 0xFE	; 254
    24b4:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS01);
    24b6:	a3 e5       	ldi	r26, 0x53	; 83
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e3 e5       	ldi	r30, 0x53	; 83
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8d 7f       	andi	r24, 0xFD	; 253
    24c2:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS02);
    24c4:	a3 e5       	ldi	r26, 0x53	; 83
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e3 e5       	ldi	r30, 0x53	; 83
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	8b 7f       	andi	r24, 0xFB	; 251
    24d0:	8c 93       	st	X, r24
	OCR0=0;
    24d2:	ec e5       	ldi	r30, 0x5C	; 92
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	10 82       	st	Z, r1
}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <global_interrupt_enable>:
void global_interrupt_enable(void)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
    24e6:	af e5       	ldi	r26, 0x5F	; 95
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	ef e5       	ldi	r30, 0x5F	; 95
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 68       	ori	r24, 0x80	; 128
    24f2:	8c 93       	st	X, r24
}
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <global_interrupt_disable>:
void global_interrupt_disable(void)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,I);
    2502:	af e5       	ldi	r26, 0x5F	; 95
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	ef e5       	ldi	r30, 0x5F	; 95
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	8f 77       	andi	r24, 0x7F	; 127
    250e:	8c 93       	st	X, r24
}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <timer_delay>:
void timer_delay(uint32 delay)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	28 97       	sbiw	r28, 0x08	; 8
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	6d 83       	std	Y+5, r22	; 0x05
    252c:	7e 83       	std	Y+6, r23	; 0x06
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	TCNT0=0;
    2532:	e2 e5       	ldi	r30, 0x52	; 82
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	10 82       	st	Z, r1
	for(i=0;i<(delay);i++)
    2538:	19 82       	std	Y+1, r1	; 0x01
    253a:	1a 82       	std	Y+2, r1	; 0x02
    253c:	1b 82       	std	Y+3, r1	; 0x03
    253e:	1c 82       	std	Y+4, r1	; 0x04
    2540:	1b c0       	rjmp	.+54     	; 0x2578 <timer_delay+0x62>
	{
		while(!(TIFR&(1<<OCF0)));
    2542:	e8 e5       	ldi	r30, 0x58	; 88
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	82 70       	andi	r24, 0x02	; 2
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	b9 f3       	breq	.-18     	; 0x2542 <timer_delay+0x2c>
		Set_Bit(TIFR,OCF0);
    2554:	a8 e5       	ldi	r26, 0x58	; 88
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e8 e5       	ldi	r30, 0x58	; 88
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	82 60       	ori	r24, 0x02	; 2
    2560:	8c 93       	st	X, r24
}
void timer_delay(uint32 delay)
{
	uint32 i;
	TCNT0=0;
	for(i=0;i<(delay);i++)
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	ab 81       	ldd	r26, Y+3	; 0x03
    2568:	bc 81       	ldd	r27, Y+4	; 0x04
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	a1 1d       	adc	r26, r1
    256e:	b1 1d       	adc	r27, r1
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	ab 83       	std	Y+3, r26	; 0x03
    2576:	bc 83       	std	Y+4, r27	; 0x04
    2578:	29 81       	ldd	r18, Y+1	; 0x01
    257a:	3a 81       	ldd	r19, Y+2	; 0x02
    257c:	4b 81       	ldd	r20, Y+3	; 0x03
    257e:	5c 81       	ldd	r21, Y+4	; 0x04
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	af 81       	ldd	r26, Y+7	; 0x07
    2586:	b8 85       	ldd	r27, Y+8	; 0x08
    2588:	28 17       	cp	r18, r24
    258a:	39 07       	cpc	r19, r25
    258c:	4a 07       	cpc	r20, r26
    258e:	5b 07       	cpc	r21, r27
    2590:	c0 f2       	brcs	.-80     	; 0x2542 <timer_delay+0x2c>
	{
		while(!(TIFR&(1<<OCF0)));
		Set_Bit(TIFR,OCF0);
	}
}
    2592:	28 96       	adiw	r28, 0x08	; 8
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <OS_SetCallBack>:
void OS_SetCallBack(void(*a_ptr)(void))
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <OS_SetCallBack+0x6>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
	OS_CallBackPtr_g=a_ptr;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	90 93 7f 00 	sts	0x007F, r25
    25ba:	80 93 7e 00 	sts	0x007E, r24
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <main>:
{
	ADC_Reading=ADC;
}
#endif
int main(void)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PinA0,INPUT);
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_SetPinDirection>
	Set_Bit(SREG,I);
    25d8:	af e5       	ldi	r26, 0x5F	; 95
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ef e5       	ldi	r30, 0x5F	; 95
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	80 68       	ori	r24, 0x80	; 128
    25e4:	8c 93       	st	X, r24
	LCD_init();
    25e6:	0e 94 89 08 	call	0x1112	; 0x1112 <LCD_init>
	ADC_init(Cfg_Ptr_Struct);
    25ea:	80 91 7c 00 	lds	r24, 0x007C
    25ee:	90 91 7d 00 	lds	r25, 0x007D
    25f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_init>
	LCD_clearScreen();
    25f6:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_clearScreen>
#if (INTERRUPT_ENABLED==1)
	ADC_SetCallback(ADC_Get_Value_ISR);
#endif
	LCD_displayString("ADC Reading=");
    25fa:	80 e6       	ldi	r24, 0x60	; 96
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_displayString>
	while(1)
	{
		LCD_goToRowColumn(0,12);
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	6c e0       	ldi	r22, 0x0C	; 12
    2606:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
#if (INTERRUPT_ENABLED==1)
		ADC_Read_Channel(0,Cfg_Ptr_Struct);
#else
		ADC_Read_Channel(&ADC_Reading,Cfg_Ptr_Struct);
    260a:	20 91 7c 00 	lds	r18, 0x007C
    260e:	30 91 7d 00 	lds	r19, 0x007D
    2612:	80 e8       	ldi	r24, 0x80	; 128
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	b9 01       	movw	r22, r18
    2618:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ADC_Read_Channel>
#endif
		LCD_intgerToString(ADC_Reading);
    261c:	80 91 80 00 	lds	r24, 0x0080
    2620:	90 91 81 00 	lds	r25, 0x0081
    2624:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_intgerToString>
		if(ADC_Reading<1000)
    2628:	80 91 80 00 	lds	r24, 0x0080
    262c:	90 91 81 00 	lds	r25, 0x0081
    2630:	23 e0       	ldi	r18, 0x03	; 3
    2632:	88 3e       	cpi	r24, 0xE8	; 232
    2634:	92 07       	cpc	r25, r18
    2636:	38 f4       	brcc	.+14     	; 0x2646 <main+0x7e>
		{
			LCD_goToRowColumn(0,15);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	6f e0       	ldi	r22, 0x0F	; 15
    263c:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
			LCD_displayCharacter(' ');
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
		}
		if(ADC_Reading<100)
    2646:	80 91 80 00 	lds	r24, 0x0080
    264a:	90 91 81 00 	lds	r25, 0x0081
    264e:	84 36       	cpi	r24, 0x64	; 100
    2650:	91 05       	cpc	r25, r1
    2652:	70 f4       	brcc	.+28     	; 0x2670 <main+0xa8>
		{
			LCD_goToRowColumn(0,14);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	6e e0       	ldi	r22, 0x0E	; 14
    2658:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
			LCD_displayCharacter(' ');
    265c:	80 e2       	ldi	r24, 0x20	; 32
    265e:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
			LCD_goToRowColumn(0,15);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	6f e0       	ldi	r22, 0x0F	; 15
    2666:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
			LCD_displayCharacter(' ');
    266a:	80 e2       	ldi	r24, 0x20	; 32
    266c:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
		}
		if(ADC_Reading<10)
    2670:	80 91 80 00 	lds	r24, 0x0080
    2674:	90 91 81 00 	lds	r25, 0x0081
    2678:	8a 30       	cpi	r24, 0x0A	; 10
    267a:	91 05       	cpc	r25, r1
    267c:	10 f6       	brcc	.-124    	; 0x2602 <main+0x3a>
		{
			LCD_goToRowColumn(0,13);
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	6d e0       	ldi	r22, 0x0D	; 13
    2682:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
			LCD_displayCharacter(' ');
    2686:	80 e2       	ldi	r24, 0x20	; 32
    2688:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
			LCD_goToRowColumn(0,14);
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	6e e0       	ldi	r22, 0x0E	; 14
    2690:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_goToRowColumn>
			LCD_displayCharacter(' ');
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_displayCharacter>
    269a:	b3 cf       	rjmp	.-154    	; 0x2602 <main+0x3a>

0000269c <__prologue_saves__>:
    269c:	2f 92       	push	r2
    269e:	3f 92       	push	r3
    26a0:	4f 92       	push	r4
    26a2:	5f 92       	push	r5
    26a4:	6f 92       	push	r6
    26a6:	7f 92       	push	r7
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	ca 1b       	sub	r28, r26
    26c6:	db 0b       	sbc	r29, r27
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	09 94       	ijmp

000026d4 <__epilogue_restores__>:
    26d4:	2a 88       	ldd	r2, Y+18	; 0x12
    26d6:	39 88       	ldd	r3, Y+17	; 0x11
    26d8:	48 88       	ldd	r4, Y+16	; 0x10
    26da:	5f 84       	ldd	r5, Y+15	; 0x0f
    26dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26de:	7d 84       	ldd	r7, Y+13	; 0x0d
    26e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26e6:	b9 84       	ldd	r11, Y+9	; 0x09
    26e8:	c8 84       	ldd	r12, Y+8	; 0x08
    26ea:	df 80       	ldd	r13, Y+7	; 0x07
    26ec:	ee 80       	ldd	r14, Y+6	; 0x06
    26ee:	fd 80       	ldd	r15, Y+5	; 0x05
    26f0:	0c 81       	ldd	r16, Y+4	; 0x04
    26f2:	1b 81       	ldd	r17, Y+3	; 0x03
    26f4:	aa 81       	ldd	r26, Y+2	; 0x02
    26f6:	b9 81       	ldd	r27, Y+1	; 0x01
    26f8:	ce 0f       	add	r28, r30
    26fa:	d1 1d       	adc	r29, r1
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	ed 01       	movw	r28, r26
    2708:	08 95       	ret

0000270a <itoa>:
    270a:	fb 01       	movw	r30, r22
    270c:	9f 01       	movw	r18, r30
    270e:	e8 94       	clt
    2710:	42 30       	cpi	r20, 0x02	; 2
    2712:	c4 f0       	brlt	.+48     	; 0x2744 <itoa+0x3a>
    2714:	45 32       	cpi	r20, 0x25	; 37
    2716:	b4 f4       	brge	.+44     	; 0x2744 <itoa+0x3a>
    2718:	4a 30       	cpi	r20, 0x0A	; 10
    271a:	29 f4       	brne	.+10     	; 0x2726 <itoa+0x1c>
    271c:	97 fb       	bst	r25, 7
    271e:	1e f4       	brtc	.+6      	; 0x2726 <itoa+0x1c>
    2720:	90 95       	com	r25
    2722:	81 95       	neg	r24
    2724:	9f 4f       	sbci	r25, 0xFF	; 255
    2726:	64 2f       	mov	r22, r20
    2728:	77 27       	eor	r23, r23
    272a:	0e 94 b6 13 	call	0x276c	; 0x276c <__udivmodhi4>
    272e:	80 5d       	subi	r24, 0xD0	; 208
    2730:	8a 33       	cpi	r24, 0x3A	; 58
    2732:	0c f0       	brlt	.+2      	; 0x2736 <itoa+0x2c>
    2734:	89 5d       	subi	r24, 0xD9	; 217
    2736:	81 93       	st	Z+, r24
    2738:	cb 01       	movw	r24, r22
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	a1 f7       	brne	.-24     	; 0x2726 <itoa+0x1c>
    273e:	16 f4       	brtc	.+4      	; 0x2744 <itoa+0x3a>
    2740:	5d e2       	ldi	r21, 0x2D	; 45
    2742:	51 93       	st	Z+, r21
    2744:	10 82       	st	Z, r1
    2746:	c9 01       	movw	r24, r18
    2748:	0c 94 a6 13 	jmp	0x274c	; 0x274c <strrev>

0000274c <strrev>:
    274c:	dc 01       	movw	r26, r24
    274e:	fc 01       	movw	r30, r24
    2750:	67 2f       	mov	r22, r23
    2752:	71 91       	ld	r23, Z+
    2754:	77 23       	and	r23, r23
    2756:	e1 f7       	brne	.-8      	; 0x2750 <strrev+0x4>
    2758:	32 97       	sbiw	r30, 0x02	; 2
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <strrev+0x18>
    275c:	7c 91       	ld	r23, X
    275e:	6d 93       	st	X+, r22
    2760:	70 83       	st	Z, r23
    2762:	62 91       	ld	r22, -Z
    2764:	ae 17       	cp	r26, r30
    2766:	bf 07       	cpc	r27, r31
    2768:	c8 f3       	brcs	.-14     	; 0x275c <strrev+0x10>
    276a:	08 95       	ret

0000276c <__udivmodhi4>:
    276c:	aa 1b       	sub	r26, r26
    276e:	bb 1b       	sub	r27, r27
    2770:	51 e1       	ldi	r21, 0x11	; 17
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <__udivmodhi4_ep>

00002774 <__udivmodhi4_loop>:
    2774:	aa 1f       	adc	r26, r26
    2776:	bb 1f       	adc	r27, r27
    2778:	a6 17       	cp	r26, r22
    277a:	b7 07       	cpc	r27, r23
    277c:	10 f0       	brcs	.+4      	; 0x2782 <__udivmodhi4_ep>
    277e:	a6 1b       	sub	r26, r22
    2780:	b7 0b       	sbc	r27, r23

00002782 <__udivmodhi4_ep>:
    2782:	88 1f       	adc	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	5a 95       	dec	r21
    2788:	a9 f7       	brne	.-22     	; 0x2774 <__udivmodhi4_loop>
    278a:	80 95       	com	r24
    278c:	90 95       	com	r25
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	08 95       	ret

00002794 <_exit>:
    2794:	f8 94       	cli

00002796 <__stop_program>:
    2796:	ff cf       	rjmp	.-2      	; 0x2796 <__stop_program>
